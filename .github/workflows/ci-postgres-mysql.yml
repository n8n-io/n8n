name: Test Postgres and MySQL schemas

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
  pull_request:
    paths:
      - packages/cli/src/databases/**
      - .github/workflows/ci-postgres-mysql.yml
      - .github/docker-compose.yml
  pull_request_review:
    types: [submitted]

concurrency:
  group: db-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Install & Build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request_review' || startsWith(github.event.pull_request.base.ref, 'release/')
    steps:
      - uses: actions/checkout@v4.1.1
      - run: corepack enable
      - uses: actions/setup-node@v4.0.2
        with:
          node-version: 20.x
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile

      - name: Setup build cache
        uses: rharkor/caching-for-turbo@v1.5

      - name: Build Backend
        run: pnpm build:backend

      - name: Cache build artifacts
        uses: actions/cache/save@v4.0.0
        with:
          path: ./packages/**/dist
          key: ${{ github.sha }}:db-tests

  sqlite-pooled:
    name: SQLite Pooled
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20
    env:
      DB_TYPE: sqlite
      DB_SQLITE_POOL_SIZE: 4
    steps:
      - uses: actions/checkout@v4.1.1
      - run: corepack enable
      - uses: actions/setup-node@v4.0.2
        with:
          node-version: 20.x
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile

      - name: Setup build cache
        uses: rharkor/caching-for-turbo@v1.5

      - name: Restore cached build artifacts
        uses: actions/cache/restore@v4.0.0
        with:
          path: ./packages/**/dist
          key: ${{ github.sha }}:db-tests

      - name: Test SQLite Pooled
        working-directory: packages/cli
        run: pnpm jest

  mariadb:
    name: MariaDB
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20
    env:
      DB_MYSQLDB_PASSWORD: password
    steps:
      - uses: actions/checkout@v4.1.1
      - run: corepack enable
      - uses: actions/setup-node@v4.0.2
        with:
          node-version: 20.x
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile

      - name: Setup build cache
        uses: rharkor/caching-for-turbo@v1.5

      - name: Restore cached build artifacts
        uses: actions/cache/restore@v4.0.0
        with:
          path: ./packages/**/dist
          key: ${{ github.sha }}:db-tests

      - name: Start MariaDB
        uses: isbang/compose-action@v2.0.0
        with:
          compose-file: ./.github/docker-compose.yml
          services: |
            mariadb

      - name: Test MariaDB
        working-directory: packages/cli
        run: pnpm test:mariadb --testTimeout 20000

  postgres:
    name: Postgres
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20
    env:
      DB_POSTGRESDB_PASSWORD: password
      DB_POSTGRESDB_POOL_SIZE: 1 # Detect connection pooling deadlocks
    steps:
      - uses: actions/checkout@v4.1.1
      - run: corepack enable
      - uses: actions/setup-node@v4.0.2
        with:
          node-version: 20.x
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile

      - name: Setup build cache
        uses: rharkor/caching-for-turbo@v1.5

      - name: Restore cached build artifacts
        uses: actions/cache/restore@v4.0.0
        with:
          path: ./packages/**/dist
          key: ${{ github.sha }}:db-tests

      - name: Start Postgres
        uses: isbang/compose-action@v2.0.0
        with:
          compose-file: ./.github/docker-compose.yml
          services: |
            postgres

      - name: Test Postgres
        working-directory: packages/cli
        run: pnpm test:postgres

  notify-on-failure:
    name: Notify Slack on failure
    runs-on: ubuntu-latest
    needs: [mariadb, postgres]
    steps:
      - name: Notify Slack on failure
        uses: act10ns/slack@v2.0.0
        if: failure() && github.ref == 'refs/heads/master'
        with:
          status: ${{ job.status }}
          channel: '#alerts-build'
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          message: Postgres or MariaDB tests failed (${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
