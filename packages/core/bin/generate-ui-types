#!/usr/bin/env node

const { LoggerProxy, NodeHelpers } = require('n8n-workflow');
const { PackageDirectoryLoader } = require('../dist/DirectoryLoader');
const { packageDir, writeJSON } = require('./common');

LoggerProxy.init(console);

function findReferencedMethods(obj, refs = {}, latestName = '') {
	for (const key in obj) {
		if (key === 'name' && 'group' in obj) {
			latestName = obj[key];
		}

		if (typeof obj[key] === 'object') {
			findReferencedMethods(obj[key], refs, latestName);
		}

		if (key === 'loadOptionsMethod') {
			refs[latestName] = refs[latestName]
				? [...new Set([...refs[latestName], obj[key]])]
				: [obj[key]];
		}
	}

	return refs;
}

(async () => {
	const loader = new PackageDirectoryLoader(packageDir);
	await loader.loadAll();

	const loaderNodeTypes = Object.values(loader.nodeTypes);

	const definedMethods = loaderNodeTypes.reduce((acc, cur) => {
		NodeHelpers.getVersionedNodeTypeAll(cur.type).forEach((type) => {
			const methods = type.description?.__loadOptionsMethods;

			if (!methods) return;

			const { name } = type.description;

			if (acc[name]) {
				acc[name] = [...new Set([...acc[name], ...methods])];
				return;
			}

			acc[name] = methods;
		});

		return acc;
	}, {});

	const nodeTypes = loaderNodeTypes
		.map((data) => {
			const nodeType = NodeHelpers.getVersionedNodeType(data.type);
			NodeHelpers.applySpecialNodeParameters(nodeType);
			return data.type;
		})
		.flatMap((nodeType) =>
			NodeHelpers.getVersionedNodeTypeAll(nodeType).map((item) => {
				const { __loadOptionsMethods, ...rest } = item.description;
				return rest;
			}),
		);

	const knownCredentials = loader.known.credentials;
	const credentialTypes = Object.values(loader.credentialTypes).map((data) => {
		const credentialType = data.type;
		const supportedNodes = knownCredentials[credentialType.name].supportedNodes ?? [];
		if (supportedNodes.length > 0 && credentialType.httpRequestNode) {
			credentialType.httpRequestNode.hidden = true;
		}

		credentialType.supportedNodes = supportedNodes;

		if (!credentialType.iconUrl && !credentialType.icon) {
			for (const supportedNode of supportedNodes) {
				const nodeType = loader.nodeTypes[supportedNode]?.type.description;

				if (!nodeType) continue;
				if (nodeType.icon) {
					credentialType.icon = nodeType.icon;
					credentialType.iconColor = nodeType.iconColor;
					break;
				}
				if (nodeType.iconUrl) {
					credentialType.iconUrl = nodeType.iconUrl;
					break;
				}
			}
		}

		return credentialType;
	});

	const referencedMethods = findReferencedMethods(nodeTypes);

	await Promise.all([
		writeJSON('types/credentials.json', credentialTypes),
		writeJSON('types/nodes.json', nodeTypes),
		writeJSON('methods/defined.json', definedMethods),
		writeJSON('methods/referenced.json', referencedMethods),
	]);
})();
