module.exports = {
	githubTrigger: {
		header: {
			displayName: 'ğŸ‡©ğŸ‡ª GitHub Trigger',
			description: 'ğŸ‡©ğŸ‡ª Listen to GitHub events',
		},
	},
	github: {
		header: {
			displayName: 'ğŸ‡©ğŸ‡ª GitHub',
			description: 'ğŸ‡©ğŸ‡ª Consume GitHub API',
		},
		credentialsModal: {
			githubOAuth2Api: {
				server: {
					displayName: 'ğŸ‡©ğŸ‡ª Github Server',
					description: 'ğŸ‡©ğŸ‡ª The server to connect to. Only has to be set if Github Enterprise is used.',
				},
			},
			githubApi: {
				server: {
					displayName: 'ğŸ‡©ğŸ‡ª Github Server',
					description: 'ğŸ‡©ğŸ‡ª The server to connect to. Only has to be set if Github Enterprise is used.',
				},
				user: {
					placeholder: 'ğŸ‡©ğŸ‡ª Hans',
				},
				accessToken: {
					placeholder: 'ğŸ‡©ğŸ‡ª 123',
				},
			},
		},
		nodeView: {
			/**
			 * Examples of `options` parameters.
			 */
			authentication: {
				displayName: 'ğŸ‡©ğŸ‡ª Authentication',
				options: {
					accessToken: {
						displayName: 'ğŸ‡©ğŸ‡ª Access Token',
					},
					oAuth2: {
						displayName: 'ğŸ‡©ğŸ‡ª OAuth2',
					},
				},
			},
			resource: {
				displayName: 'ğŸ‡©ğŸ‡ª Resource',
				description: 'ğŸ‡©ğŸ‡ª The resource to operate on.',
				options: {
					issue: {
						displayName: 'ğŸ‡©ğŸ‡ª Issue',
					},
					file: {
						displayName: 'ğŸ‡©ğŸ‡ª File',
					},
					repository: {
						displayName: 'ğŸ‡©ğŸ‡ª Repository',
					},
					release: {
						displayName: 'ğŸ‡©ğŸ‡ª Release',
					},
					review: {
						displayName: 'ğŸ‡©ğŸ‡ª Review',
					},
					user: {
						displayName: 'ğŸ‡©ğŸ‡ª User',
					},
				},
			},
			operation: {
				displayName: 'ğŸ‡©ğŸ‡ª Operation',
				options: {
					create: {
						displayName: 'ğŸ‡©ğŸ‡ª Create',
						description: 'ğŸ‡©ğŸ‡ª Create a new issue.',
					},
					get: {
						displayName: 'ğŸ‡©ğŸ‡ª Get',
						description: 'ğŸ‡©ğŸ‡ª Get the data of a single issue.',
					},
				},
			},

			/**
			 * Examples of `string` parameters.
			 */
			owner: {
				displayName: 'ğŸ‡©ğŸ‡ª Repository Owner',
				placeholder: 'ğŸ‡©ğŸ‡ª n8n-io',
				description: 'ğŸ‡©ğŸ‡ª Owner of the repository.',
			},
			repository: {
				displayName: 'ğŸ‡©ğŸ‡ª Repository Name',
				placeholder: 'ğŸ‡©ğŸ‡ª n8n',
			},
			title: {
				displayName: 'ğŸ‡©ğŸ‡ª Title',
			},
			body: {
				displayName: 'ğŸ‡©ğŸ‡ª Body',
			},

			/**
			 * Examples of `collection` parameters.
			 * `multipleValueButtonText` is the button label.
			 */
			labels: {
				displayName: 'ğŸ‡©ğŸ‡ª Labels',
				multipleValueButtonText: 'ğŸ‡©ğŸ‡ª Add Label',
			},
			assignees: {
				displayName: 'ğŸ‡©ğŸ‡ª Assignees',
				multipleValueButtonText: 'ğŸ‡©ğŸ‡ª Add Assignee',
			},

			/**
			 * Examples of fields in `collection` parameters.
			 * Note: Same level of nesting as `collection`.
			 */
			label: {
				displayName: 'ğŸ‡©ğŸ‡ª Label',
				description: 'ğŸ‡©ğŸ‡ª Label to add to issue.',
			},
			assignee: {
				displayName: 'ğŸ‡©ğŸ‡ª Assignee',
				description: 'ğŸ‡©ğŸ‡ª User to assign issue to.',
			},

			/**
			 * Example of a `fixedCollection` parameter.
			 * `placeholder` is the button label.
			 */
			additionalParameters: {
				displayName: 'ğŸ‡©ğŸ‡ª Additional Fields',
				placeholder: 'ğŸ‡©ğŸ‡ª Add Field',
				options: {
					author: {
						displayName: 'ğŸ‡©ğŸ‡ª Author',
					},
					branch: {
						displayName: 'ğŸ‡©ğŸ‡ª Branch',
					},
					committer: {
						displayName: 'ğŸ‡©ğŸ‡ª Committer',
					},
				},
			},

			/**
			 * Example of a field in a `fixedCollection` parameter.
			 * Note: Same level of nesting as `fixedCollection`.
			 */
			committer: {
				displayName: 'ğŸ‡©ğŸ‡ª Commit-Macher',
				description: 'ğŸ‡©ğŸ‡ª Beschreibung',
			},

			/**
			 * Examples of options in a field in a `fixedCollection` parameter.
			 * Note: Same level of nesting as `fixedCollection`.
			 */
			name: {
				displayName: 'ğŸ‡©ğŸ‡ª Name',
				description: 'ğŸ‡©ğŸ‡ª The name of the author of the commit.',
			},
			email: {
				displayName: 'ğŸ‡©ğŸ‡ª Email',
				description: 'ğŸ‡©ğŸ‡ª The email of the author of the commit.'
			},

		},
	},
};
