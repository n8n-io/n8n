#!/usr/bin/env node

import { writeFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { discoverPlugins } from './discover-plugins.mjs';

const __dirname = dirname(fileURLToPath(import.meta.url));
const OUTPUT_PATH = join(__dirname, '../src/plugins/registry.generated.ts');

function getExtensionPoints(manifest) {
	// Return all extension points from manifest
	if (manifest.extends && typeof manifest.extends === 'object') {
		return Object.keys(manifest.extends);
	}
	return [];
}

function generateRegistryCode(plugins) {
	const frontendPlugins = plugins.filter((p) => p.hasFrontend);

	// Generate static imports at the top
	const imports = frontendPlugins
		.map((p, idx) => {
			return `// @ts-expect-error This is resolved in vite
import * as plugin${idx} from '${p.resolvedName}/frontend/index';`;
		})
		.join('\n');

	const entries = frontendPlugins
		.map((p, idx) => {
			const extensionPoints = getExtensionPoints(p.manifest);
			const extensionPointsJson = JSON.stringify(extensionPoints);

			// Reference the statically imported plugin - access shouldLoad through default export
			const shouldLoadLine = `    shouldLoad: plugin${idx}.default?.shouldLoad,`;

			return `  {
    name: '${p.name}',
    resolvedName: '${p.resolvedName}',
    module: plugin${idx},
${shouldLoadLine}
    extensionPoints: ${extensionPointsJson},
    manifest: ${JSON.stringify(p.manifest, null, 4).replace(/\n/g, '\n    ')},
  }`;
		})
		.join(',\n');

	return `// This file is auto-generated by scripts/generate-plugin-registry.mjs
// Do not edit manually!

/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */

import type { PluginManifest } from '@n8n/extension-sdk/validation';
import type { FrontendPlugin } from '@n8n/extension-sdk/frontend';

${imports}

export interface PluginDefinition {
  name: string;
  resolvedName: string;
  module: { default: FrontendPlugin };
  shouldLoad?: () => Promise<boolean>;
  extensionPoints: string[];
  manifest: PluginManifest;
}

export const PLUGINS: PluginDefinition[] = [
${entries}
];
`;
}

async function generatePluginRegistry() {
	console.log('🔍 Discovering plugins...');
	const plugins = await discoverPlugins();

	console.log('📝 Generating plugin registry...');
	const code = generateRegistryCode(plugins);

	writeFileSync(OUTPUT_PATH, code, 'utf-8');
	console.log(`✓ Generated plugin registry: ${OUTPUT_PATH}\n`);
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
	generatePluginRegistry().catch((error) => {
		console.error('❌ Registry generation failed:', error);
		process.exit(1);
	});
}

export { generatePluginRegistry };
